// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250506225446_blessed")]
    partial class blessed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("FKfactory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FKfactory")
                        .IsUnique()
                        .HasFilter("[FKfactory] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Audit", b =>
                {
                    b.Property<Guid>("IdAudit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FKauditor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKfactory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOld")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PlanDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdAudit");

                    b.HasIndex("FKauditor");

                    b.HasIndex("FKfactory");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("Domain.Models.Critaire", b =>
                {
                    b.Property<Guid>("IdCritaire")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKsx")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Key")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.HasKey("IdCritaire");

                    b.HasIndex("FKsx");

                    b.ToTable("Critaires");
                });

            modelBuilder.Entity("Domain.Models.CritereDefinition", b =>
                {
                    b.Property<Guid>("IdCritereDefinition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKsxDefinition")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCritereDefinition");

                    b.HasIndex("FKsxDefinition");

                    b.ToTable("critereDefinitions");
                });

            modelBuilder.Entity("Domain.Models.Evidence", b =>
                {
                    b.Property<Guid>("IdEvidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FKrapport")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdEvidence");

                    b.HasIndex("FKrapport");

                    b.ToTable("Evidence");
                });

            modelBuilder.Entity("Domain.Models.Factory", b =>
                {
                    b.Property<Guid>("IdFactory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FKfiliale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFactory");

                    b.HasIndex("FKfiliale");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Domain.Models.Filiale", b =>
                {
                    b.Property<Guid>("IdFiliale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFiliale");

                    b.ToTable("Filiales");
                });

            modelBuilder.Entity("Domain.Models.Nofication", b =>
                {
                    b.Property<Guid>("IdNofication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FKappuser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdDes")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("RoleDes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNofication");

                    b.HasIndex("FKappuser");

                    b.ToTable("Nofications");
                });

            modelBuilder.Entity("Domain.Models.Parametres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Maintenance")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Parametres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Maintenance = false
                        });
                });

            modelBuilder.Entity("Domain.Models.PlanAction", b =>
                {
                    b.Property<Guid>("IdPlanAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FKfactory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKqualitym")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKrapport")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPlanAction");

                    b.HasIndex("FKfactory");

                    b.HasIndex("FKqualitym");

                    b.HasIndex("FKrapport");

                    b.ToTable("PlanActions");
                });

            modelBuilder.Entity("Domain.Models.Rapport", b =>
                {
                    b.Property<Guid>("IdRapport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FKauditor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FKfactory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<Guid>("X")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdRapport");

                    b.HasIndex("FKauditor");

                    b.HasIndex("FKfactory");

                    b.ToTable("Rapports");
                });

            modelBuilder.Entity("Domain.Models.SDefinition", b =>
                {
                    b.Property<Guid>("IdSDefinition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameJaponaise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NumberS"));

                    b.HasKey("IdSDefinition");

                    b.ToTable("SxDefinitions");
                });

            modelBuilder.Entity("Domain.Models.Sx", b =>
                {
                    b.Property<Guid>("IdSx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FKfactory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameJaponaise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberS")
                        .HasColumnType("int");

                    b.HasKey("IdSx");

                    b.HasIndex("FKfactory");

                    b.ToTable("Sx");
                });

            modelBuilder.Entity("Domain.Models.Tache", b =>
                {
                    b.Property<Guid>("IdTache")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Commantaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FKplanaction")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameS")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Pictures")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTache");

                    b.HasIndex("FKplanaction");

                    b.ToTable("Taches");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Models.AppUser", b =>
                {
                    b.HasOne("Domain.Models.Factory", "Factory")
                        .WithOne("AppUser")
                        .HasForeignKey("Domain.Models.AppUser", "FKfactory")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Domain.Models.Audit", b =>
                {
                    b.HasOne("Domain.Models.AppUser", "AppUser")
                        .WithMany("Audits")
                        .HasForeignKey("FKauditor");

                    b.HasOne("Domain.Models.Factory", "Factory")
                        .WithMany("Audits")
                        .HasForeignKey("FKfactory")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Domain.Models.Critaire", b =>
                {
                    b.HasOne("Domain.Models.Sx", "Sx")
                        .WithMany("Critaires")
                        .HasForeignKey("FKsx")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sx");
                });

            modelBuilder.Entity("Domain.Models.CritereDefinition", b =>
                {
                    b.HasOne("Domain.Models.SDefinition", "SDefinition")
                        .WithMany("Critaires")
                        .HasForeignKey("FKsxDefinition")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SDefinition");
                });

            modelBuilder.Entity("Domain.Models.Evidence", b =>
                {
                    b.HasOne("Domain.Models.Rapport", "Rapport")
                        .WithMany("Evidence")
                        .HasForeignKey("FKrapport")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rapport");
                });

            modelBuilder.Entity("Domain.Models.Factory", b =>
                {
                    b.HasOne("Domain.Models.Filiale", "Filiale")
                        .WithMany("Factories")
                        .HasForeignKey("FKfiliale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filiale");
                });

            modelBuilder.Entity("Domain.Models.Nofication", b =>
                {
                    b.HasOne("Domain.Models.AppUser", "AppUser")
                        .WithMany("Nofications")
                        .HasForeignKey("FKappuser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.Models.PlanAction", b =>
                {
                    b.HasOne("Domain.Models.Factory", "Factory")
                        .WithMany("PlanActions")
                        .HasForeignKey("FKfactory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.AppUser", "QualityM")
                        .WithMany("QualityPlanActions")
                        .HasForeignKey("FKqualitym")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Rapport", "Rapport")
                        .WithMany("PlanActions")
                        .HasForeignKey("FKrapport");

                    b.Navigation("Factory");

                    b.Navigation("QualityM");

                    b.Navigation("Rapport");
                });

            modelBuilder.Entity("Domain.Models.Rapport", b =>
                {
                    b.HasOne("Domain.Models.AppUser", "AppUser")
                        .WithMany("Rapports")
                        .HasForeignKey("FKauditor");

                    b.HasOne("Domain.Models.Factory", "Factory")
                        .WithMany("Rapports")
                        .HasForeignKey("FKfactory")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AppUser");

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Domain.Models.Sx", b =>
                {
                    b.HasOne("Domain.Models.Factory", "Factory")
                        .WithMany("Sx")
                        .HasForeignKey("FKfactory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("Domain.Models.Tache", b =>
                {
                    b.HasOne("Domain.Models.PlanAction", "PlanAction")
                        .WithMany("Taches")
                        .HasForeignKey("FKplanaction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlanAction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.AppUser", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Nofications");

                    b.Navigation("QualityPlanActions");

                    b.Navigation("Rapports");
                });

            modelBuilder.Entity("Domain.Models.Factory", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("Audits");

                    b.Navigation("PlanActions");

                    b.Navigation("Rapports");

                    b.Navigation("Sx");
                });

            modelBuilder.Entity("Domain.Models.Filiale", b =>
                {
                    b.Navigation("Factories");
                });

            modelBuilder.Entity("Domain.Models.PlanAction", b =>
                {
                    b.Navigation("Taches");
                });

            modelBuilder.Entity("Domain.Models.Rapport", b =>
                {
                    b.Navigation("Evidence");

                    b.Navigation("PlanActions");
                });

            modelBuilder.Entity("Domain.Models.SDefinition", b =>
                {
                    b.Navigation("Critaires");
                });

            modelBuilder.Entity("Domain.Models.Sx", b =>
                {
                    b.Navigation("Critaires");
                });
#pragma warning restore 612, 618
        }
    }
}
